!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).tfidf=e.tfidf||{})}(this,(function(e){"use strict";class t{constructor(e){this._text=e,this._words=e.match(/[a-zA-ZÀ-ÖØ-öø-ÿ]+/g).filter(e=>!(e.length<2||e.match(/^\d/))).map(e=>e.toLowerCase()),this._termFrequencies=null}_calculateTermFrequencies(){this._termFrequencies=new Map,this._words.forEach(e=>{this._termFrequencies.has(e)?this._termFrequencies.set(e,this._termFrequencies.get(e)+1):this._termFrequencies.set(e,1)})}getTermFrequency(e){return this._termFrequencies||this._calculateTermFrequencies(),this._termFrequencies.has(e)?this._termFrequencies.get(e):null}getText(){return this._text}getLength(){return this._words.length}getUniqueTerms(){return this._termFrequencies||this._calculateTermFrequencies(),Array.from(this._termFrequencies.keys())}}const s=["me","my","myself","we","our","ours","ourselves","you","your","yours","yourself","yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself","they","them","their","theirs","themselves","what","which","who","whom","this","that","these","those","am","is","are","was","were","be","been","being","have","has","had","having","do","does","did","doing","an","the","and","but","if","or","because","as","until","while","of","at","by","for","with","about","against","between","into","through","during","before","after","above","below","to","from","up","down","in","out","on","off","over","under","again","further","then","once","here","there","when","where","why","how","all","any","both","each","few","more","most","other","some","such","no","nor","not","only","own","same","so","than","too","very","can","will","just","don","could","should","would","now","ll","re","ve","aren","couldn","didn","doesn","hadn","hasn","haven","isn","mustn","needn","shouldn","wasn","weren","won","wouldn"];class n{constructor(e=!0,t=[]){const n=e?t.concat(s):t;this._stopwords=new Map(n.map(e=>[e,!0]))}includes(e){return this._stopwords.has(e)}getStopwordList(){return Array.from(this._stopwords.keys())}}class r{constructor(e){this._corpus=e,this._distanceMatrix=null}static cosineSimilarity(e,t){const s=Array.from(e.values()),n=Array.from(t.values());let r=0,o=0,i=0;const c=Math.min(s.length,n.length);for(let e=0;e<c;e++)0===s[e]&&0===n[e]||(r+=s[e]*n[e],o+=s[e]*s[e],i+=n[e]*n[e]);const l=Math.sqrt(o)*Math.sqrt(i);return l?r/l:0}_calculateDistanceMatrix(){const e=this._corpus.getDocumentIdentifiers(),t=e.map(e=>this._corpus.getDocumentVector(e)),s=new Array(t.length).fill(null).map(()=>new Array(t.length));for(let e=0;e<t.length;e++)for(let n=e;n<t.length;n++)e===n?s[e][n]=0:(s[e][n]=1-r.cosineSimilarity(t[e],t[n]),s[n][e]=s[e][n]);this._distanceMatrix={identifiers:e,matrix:s}}getDistanceMatrix(){return this._distanceMatrix||this._calculateDistanceMatrix(),this._distanceMatrix}}e.Corpus=class{constructor(e,s,r=!0,o=[],i=2,c=.75){this._stopwords=new n(r,o),this._K1=i,this._b=c,this._documents=new Map;for(let n=0;n<s.length;n++)this._documents.set(e[n],new t(s[n]));this._collectionFrequencies=null,this._collectionFrequencyWeights=null,this._documentVectors=null}_calculateCollectionFrequencies(){this._collectionFrequencies=new Map;for(const e of this._documents.values())e.getUniqueTerms().filter(e=>!this._stopwords.includes(e)).forEach(e=>{if(this._collectionFrequencies.has(e)){const t=this._collectionFrequencies.get(e);this._collectionFrequencies.set(e,t+1)}else this._collectionFrequencies.set(e,1)})}getTerms(){return this._collectionFrequencies||this._calculateCollectionFrequencies(),Array.from(this._collectionFrequencies.keys())}getCollectionFrequency(e){return this._collectionFrequencies||this._calculateCollectionFrequencies(),this._collectionFrequencies.has(e)?this._collectionFrequencies.get(e):null}getDocument(e){return this._documents.get(e)}getDocumentIdentifiers(){return Array.from(this._documents.keys())}getCommonTerms(e,t,s=10){const n=this.getDocumentVector(e),r=this.getDocumentVector(t);return Array.from(n.entries()).map(([e,t])=>[e,t*r.get(e)]).filter(e=>e[1]>0).sort((e,t)=>t[1]-e[1]).slice(0,s)}_calculateCollectionFrequencyWeights(){this._collectionFrequencies||this._calculateCollectionFrequencies(),this._collectionFrequencyWeights=new Map;const e=this._documents.size;for(const[t,s]of this._collectionFrequencies.entries())this._collectionFrequencyWeights.set(t,Math.log(e+1)-Math.log(s))}getCollectionFrequencyWeight(e){return this._collectionFrequencyWeights||this._calculateCollectionFrequencyWeights(),this._collectionFrequencyWeights.has(e)?this._collectionFrequencyWeights.get(e):null}_calculateDocumentVectors(){this._collectionFrequencyWeights||this._calculateCollectionFrequencyWeights(),this._documentVectors=new Map;const e=this._K1,t=this._b,s=Array.from(this._documents.values()).map(e=>e.getLength()).reduce((e,t)=>e+t,0)/this._documents.size;for(const[n,r]of this._documents){const o=new Map,i=r.getLength()/s;for(const[s,n]of this._collectionFrequencyWeights.entries()){const c=r.getTermFrequency(s),l=c?n*c*(e+1)/(e*(1-t+t*i)+c):0;o.set(s,l)}this._documentVectors.set(n,o)}}getDocumentVector(e){return this._documentVectors||this._calculateDocumentVectors(),this._documentVectors.get(e)}getTopTermsForDocument(e,t=30){const s=this.getDocumentVector(e);return s?Array.from(s.entries()).filter(e=>e[1]>0).sort((e,t)=>t[1]-e[1]).slice(0,t):[]}getResultsForQuery(e){if(!e||"string"!=typeof e||0===e.length)return[];const s=new t(e).getUniqueTerms();return this.getDocumentIdentifiers().map(e=>{const t=this.getDocumentVector(e);let n=0;return s.forEach(e=>{const s=t.get(e);s&&(n+=s)}),[e,n]}).filter(e=>e[1]>0).sort((e,t)=>t[1]-e[1])}getStopwords(){return this._stopwords}},e.Document=t,e.Similarity=r,e.Stopwords=n,Object.defineProperty(e,"__esModule",{value:!0})}));
